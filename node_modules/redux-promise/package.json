{
  "_args": [
    [
      {
        "raw": "redux-promise",
        "scope": null,
        "escapedName": "redux-promise",
        "name": "redux-promise",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/mohit/Documents/react_project/udemy/weather/ReduxSimpleStarter"
    ]
  ],
  "_from": "redux-promise@latest",
  "_id": "redux-promise@0.6.0",
  "_inCache": true,
  "_location": "/redux-promise",
  "_nodeVersion": "8.9.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/redux-promise_0.6.0_1526305125825_0.03910029987716501"
  },
  "_npmUser": {
    "name": "timche",
    "email": "tim@cheung.io"
  },
  "_npmVersion": "5.8.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-promise",
    "scope": null,
    "escapedName": "redux-promise",
    "name": "redux-promise",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-promise/-/redux-promise-0.6.0.tgz",
  "_shasum": "c64723b5213bb5603c11b74302883b682e06b319",
  "_shrinkwrap": null,
  "_spec": "redux-promise",
  "_where": "/home/mohit/Documents/react_project/udemy/weather/ReduxSimpleStarter",
  "author": {
    "name": "Andrew Clark",
    "email": "acdlite@me.com"
  },
  "bugs": {
    "url": "https://github.com/redux-utilities/redux-promise/issues"
  },
  "dependencies": {
    "flux-standard-action": "^2.0.3",
    "is-promise": "^2.1.0"
  },
  "description": "FSA-compliant promise middleware for Redux.",
  "devDependencies": {
    "@babel/cli": "^7.0.0-beta.46",
    "@babel/core": "^7.0.0-beta.46",
    "@babel/preset-env": "^7.0.0-beta.46",
    "babel-core": "^7.0.0-0",
    "babel-jest": "^22.4.3",
    "eslint-config-jest-files": "^0.1.3",
    "eslint-config-unicorn-camelcase": "^0.1.1",
    "husky": "^0.14.3",
    "jest": "^22.4.3",
    "prettier": "^1.12.1",
    "pretty-quick": "^1.4.1",
    "xo": "^0.21.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-R2mGxJbPFgXyCNbFDE6LjTZhCEuACF54g1bxld3nqBhnRMX0OsUyWk77moF7UMGkUdl5WOAwc4BC5jOd1dunqQ==",
    "shasum": "c64723b5213bb5603c11b74302883b682e06b319",
    "tarball": "https://registry.npmjs.org/redux-promise/-/redux-promise-0.6.0.tgz",
    "fileCount": 4,
    "unpackedSize": 7352,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+ZFmCRA9TVsSAnZWagAAsooP/AswflWoboXg5xqddOFC\nvz0/XPJukjrv2xG8cHbSlKomERtUdbFsQVmkXnDVrB/EF+j51ynSXE/bQfY1\novrcj4fk56jDFw3MeEa4Hh2SjmGLkBmuJ00ODrOdwuJCJZ3CkPIlhEuYAI3S\nhYG6Fu7I9+m/mz1mKkWLmMOBPEkavy3avlgqXgbEiGFNdJkegkmP1k+OXnuk\ns0pBi3Wm8attsjtWhpb7OAd8QuzEGQiDQ2e0f0olw/Iq4oRtTXL0v97Tm0vG\nhKDZTeC90vgm+JYlfCFdwk9YzMTvSJIzyYVqKnlXYy6HZAsTJAFOScP+p86w\nWiBnm2VIluHLvrGUWb+aQ4l8CTC79to95g9R2sbk4gyfaw7Hg1+2PB42lz7N\n8Sy72v3s48pgWmTSgKQo0ahESI1gawwNwgLoVNkLTZjBQgH1Ps0NUp0TG1Gy\npI90r4H5o637Cb3OQ4PvfWfrrRBadw0E4Q+8TZmjF5LjHtiEzV1q5wKYX4zy\n365bS/kSh61sfWdEQxftAtvscwvgVjyMoTM/lNT1Z0GEaCStHz9Id3T8Tz8o\ntdh76evCasXooS+MOOSC1BqvtInxbntqj+jgjE2a7m/U0bvkFDwgcePyYXd9\nzqZ/b+iz+8A9zERbVmPMtI4UwZDxZgxZHKRZDHIuIiARZ1/f/WLMGfDLA2Pb\nPh8P\r\n=Ppd0\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "0c3db68a0b4357be13422ce4a6a5e034758f1685",
  "homepage": "https://github.com/redux-utilities/redux-promise",
  "jest": {
    "collectCoverage": true,
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    }
  },
  "keywords": [
    "redux",
    "promise",
    "middleware",
    "redux-middleware",
    "fsa",
    "flux"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "acdlite",
      "email": "acdlite@me.com"
    },
    {
      "name": "jakxz",
      "email": "jgkurian@me.com"
    },
    {
      "name": "timche",
      "email": "tim@cheung.io"
    }
  ],
  "name": "redux-promise",
  "optionalDependencies": {},
  "prettier": {
    "singleQuote": true,
    "bracketSpacing": true
  },
  "readme": "# redux-promise\n\n[![build status](https://img.shields.io/travis/redux-utilities/redux-promise/master.svg)](https://travis-ci.org/redux-utilities/redux-promise)\n[![codecov](https://codecov.io/gh/redux-utilities/redux-promise/branch/master/graph/badge.svg)](https://codecov.io/gh/redux-utilities/redux-promise)\n[![npm version](https://img.shields.io/npm/v/redux-promise.svg)](https://www.npmjs.com/package/redux-promise)\n[![npm monthly downloads](https://img.shields.io/npm/dm/redux-promise.svg)](https://www.npmjs.com/package/redux-promise)\n\n[FSA](https://github.com/redux-utilities/flux-standard-action)-compliant promise [middleware](https://redux.js.org/advanced/middleware) for Redux.\n\n```js\nnpm install --save redux-promise\n```\n\n## Usage\n\n```js\nimport promiseMiddleware from 'redux-promise';\n```\n\nThe default export is a middleware function. If it receives a promise, it will dispatch the resolved value of the promise. It will not dispatch anything if the promise rejects.\n\nIf it receives an Flux Standard Action whose `payload` is a promise, it will either\n\n* dispatch a copy of the action with the resolved value of the promise, and set `status` to `success`.\n* dispatch a copy of the action with the rejected value of the promise, and set `status` to `error`.\n\nThe middleware returns a promise to the caller so that it can wait for the operation to finish before continuing. This is especially useful for server-side rendering. If you find that a promise is not being returned, ensure that all middleware before it in the chain is also returning its `next()` call to the caller.\n\n## Using in combination with redux-actions\n\nBecause it supports FSA actions, you can use redux-promise in combination with [redux-actions](https://github.com/redux-utilities/redux-actions).\n\n### Example: Async action creators\n\nThis works just like in Flummox:\n\n```js\ncreateAction('FETCH_THING', async id => {\n  const result = await somePromise;\n  return result.someValue;\n});\n```\n\nUnlike Flummox, it will not perform a dispatch at the beginning of the operation, only at the end. We're still looking into the [best way to deal with optimistic updates](https://github.com/redux-utilities/flux-standard-action/issues/7). If you have a suggestion, let me know.\n\n### Example: Integrating with a web API module\n\nSay you have an API module that sends requests to a server. This is a common pattern in Flux apps. Assuming your module supports promises, it's really easy to create action creators that wrap around your API:\n\n```js\nimport { WebAPI } from '../utils/WebAPI';\n\nexport const getThing = createAction('GET_THING', WebAPI.getThing);\nexport const createThing = createAction('POST_THING', WebAPI.createThing);\nexport const updateThing = createAction('UPDATE_THING', WebAPI.updateThing);\nexport const deleteThing = createAction('DELETE_THING', WebAPI.deleteThing);\n```\n\n(You'll probably notice how this could be simplified even further using something like lodash's `mapValues()`.)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/redux-utilities/redux-promise.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "lint": "xo",
    "precommit": "pretty-quick --staged",
    "prepublishOnly": "npm run build",
    "test": "jest"
  },
  "version": "0.6.0",
  "xo": {
    "prettier": true,
    "space": true,
    "extends": [
      "jest-files",
      "unicorn-camelcase"
    ]
  }
}
